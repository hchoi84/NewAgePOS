@page "{saleid:min(1)}"
@using NewAgePOS.ViewModels.Sale
@model NewAgePOS.Pages.Sale.CheckoutModel
@{
  ViewData["Title"] = "Checkout";
  CultureInfo dollar = new CultureInfo("en-US");
}

@if (TempData["Message"] != null)
{
  <div class="text-danger">@TempData["Message"]</div>
}

<h3 class="mt-5">ITEMS</h3>
@await Component.InvokeAsync("ItemList", new { saleId = @Model.SaleId })

<h3 class="mt-5">CUSTOMER INFO</h3>
@if (Model.Customer.EmailAddress == "guest@email.com")
{
  <h4>Guest Account</h4>
}
else
{
  <div class="form-row">
    <div class="col pr-0">
      <input readonly value="@Model.Customer.FirstName" class="form-control border-dark" />
    </div>
    <div class="col pl-0">
      <input readonly value="@Model.Customer.LastName" class="form-control border-dark" />
    </div>
  </div>
  <div class="form-row">
    <div class="col pr-0">
      <input readonly value="@Model.Customer.EmailAddress" class="form-control border-dark" />
    </div>
    <div class="col pl-0">
      <input readonly value="@Model.Customer.PhoneNumber" class="form-control border-dark" />
    </div>
  </div>
}

@* TODO: Implement (1) cancellation (for all) and (2) edit (for cash and give) transaction *@
@if (Model.Transactions.Any())
{
  <h3 class="mt-5">Transactions</h3>

  foreach (TransactionModel transaction in Model.Transactions)
  {
    string method;

    @if (transaction.GiftCardId.HasValue)
    {
      string code = Model.GiftCards.FirstOrDefault(g => g.Id == transaction.GiftCardId).Code;
      method = $"{ transaction.Method } ({ code })";
    }
    else
    {
      method = transaction.Method;
    }

    <div class="form-row">
      <div class="col pr-0">
        <input readonly value="@method" class="form-control" />
      </div>
      <div class="col pl-0">
        <input readonly value="@transaction.Amount.ToString("C2", dollar)" class="form-control" />
      </div>
    </div>

    @if (!string.IsNullOrEmpty(transaction.Message))
    {
      <div class="form-row">
        <div class="col">
          <input readonly value="@transaction.Message" class="form-control" />
        </div>
      </div>
    }
  }
}

@if (Model.IsComplete)
{
  <form method="post" asp-page-handler="CompleteSale" class="mt-1">
    <button type="submit" class="btn btn-success">Complete Sale</button>
  </form>
}
else
{
  <h3 class="mt-5">PAYMENT</h3>
  <form method="post" asp-page-handler="ApplyPayments" style="max-width: 400px;">
    <div class="form-row mt-3">
      <div class="col pr-0">
        <textarea asp-for="@Model.Checkout.GiftCardCodes" class="form-control" placeholder="Gift Card Codes"></textarea>
      </div>
      <div class="col pl-0">
        <textarea asp-for="@Model.Checkout.Message" rows="2" class="form-control" placeholder="Internal Message"></textarea>
      </div>
    </div>

    <div class="form-row">
      <div class="col pr-0">
        <select asp-for="@Model.Checkout.PaymentMethod" class="form-control" asp-items="@Model.Checkout.PaymentMethods">
          <option>Choose...</option>
        </select>
      </div>
      <div class="col pl-0">
        <input asp-for="@Model.Checkout.Amount" class="form-control">
      </div>
    </div>

    <div class="form-row mt-3">
      <div class="col pr-0">
        <label asp-for="@Model.Checkout.GiveAmount" class="col-form-label ml-3"></label>
      </div>
      <div class="col pl-0">
        <input asp-for="@Model.Checkout.GiveAmount" class="form-control" />
      </div>
    </div>
    <div class="form-row">
      <div class="col pr-0">
        <label asp-for="@Model.Checkout.GiveAmountConfirmation" class="col-form-label ml-3"></label>
      </div>
      <div class="col pl-0">
        <input asp-for="@Model.Checkout.GiveAmountConfirmation" class="form-control" />
        <span asp-validation-for="@Model.Checkout.GiveAmountConfirmation" class="text-danger"></span>
      </div>
    </div>
    <button type="submit" class="btn btn-success mt-1">Apply Payment</button>
  </form>
}

@await Component.InvokeAsync("SalePriceSummary", new { saleId = Model.SaleId })